/**
    https://spring.io/guides/gs/managing-transactions/
 */
package com.example.investrest.services;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;

import com.example.investrest.models.Quote;
import com.example.investrest.models.Stock;
import com.example.investrest.dto.QuoteDTO;
import com.example.investrest.repositories.QuoteRepository;

import lombok.RequiredArgsConstructor;

import java.lang.Iterable;

@Service
@RequiredArgsConstructor
public class QuoteService {

    private static final Logger log = LoggerFactory.getLogger(QuoteService.class);

    // This means to get the bean called quoteRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private final QuoteRepository quoteRepository;

    public Iterable<Quote> findAllQuotes() {
        log.info("Get all quotes");
        return quoteRepository.findAll();
    }

    public Quote findOneQuote(String stockId) {
        log.info("Get " + stockId + " quote");
        return quoteRepository.findByStockId(stockId);
    }

    public boolean inStock(String stockId, Stock[] stocks){
        log.info("Check if " + stockId + " in cached stocks");

        // Find if stockId is in the stocks
        for (Stock stock : stocks) {
            String id = stock.getId().toUpperCase();
            if (id.equals(stockId)) {
                return true;
            }
        }

        return false;
    }

    public Quote saveQuote(QuoteDTO quoteDTO, Stock[] stocks) {
        String stockId = quoteDTO.getStockId();
        log.info("Save quote " + stockId);

        // Check if should save quote.
        if (!inStock(stockId, stocks)){
            log.info(stockId + ": not valid.");
            return null;
        }

        Quote auxQuote = quoteRepository.findByStockId(stockId);

        if(auxQuote == null){
            // Quote does not exist in the DB.
            log.info("New quote " + stockId);
            auxQuote = quoteDTO.createQuote();
        }else{
            log.info("Update quote " + stockId);
            // Quote exists in the DB.
            auxQuote.getQuotes().put(quoteDTO.getDate(), quoteDTO.getPrice());
        }
        quoteRepository.save(auxQuote);

        return auxQuote;
    }
}
